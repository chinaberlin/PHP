<textarea kp-markdown>
# 数据结构
> 所谓数据结构是指，相互之间存在一种或多种特定关系的数据元素的集合

# 线性表 (Linear)
> 线性表是指，零个或多个数据元素的有限序列
> > 元素之间是有顺序的，若元素存在多个，则第一个无前驱，最后一个元素无后继，其他每个元素都有且只有一个前驱和后继

> > ![](./demo/数据结构/linear.png)

### 线性表的存储结构
> 顺序存储结构
> > 线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素
> > > 线性表的顺序存储结构优点:

> > > * 无须为表中元素之间的逻辑关系而增加额外的存储空间
> > > * 可以快速地存取表中任意位置的元素

> > 线性表的顺序存储结构缺点:

> > > * 插入和删除操作需要移动大量元素
> > > * 当线性表长度变化较大时，难以确定存储空间的容量
> > > * 造成存储空间的碎片

> 链式存储结构

> > 单链表

> > > n个结点链结成(Node)的一个链表，既为线性表的链式存储结构，此链表的每个节点中只包含一个指针域，所以叫做单链表

> > > 存储数据元素信息的域称为数据域，存储直接后继位置的的域称为指针域，这两部分信息组成的数据元素称为结点(Node)

> > > ![](./demo/数据结构/singelLinkedList.png)

> > 循环链表
> > > 将单链表中的终端结点的指针断右空指针改为指向头结点，使整个单链表形成一个环

> > > ![](./demo/数据结构/loopLinkedList.png)

> > 双向链表
> > > 在单链表中的每个结点中，在设置一个指向其前驱结点的指针域

> > > ![](./demo/数据结构/doublyLinkedList.png)

# 栈 (Stack)
> 栈是限定仅在表尾进行的插入和删除操作的线性表

> > 栈又称为后进先出(Last In First Out)的线性表，简称LIFO结构

> > 允许插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)

> > 栈的插入操作，叫做进栈，也称压栈，入栈 (push)

> > 栈的删除操作，叫做出栈，也称弹栈 ()

> > ![](./demo/数据结构/stack.png)

> > 函数的递归也是使用了栈结构

# 队列 (queue)
> 队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表

> > 队列是一种先进先出的线性表，简称FIFO

> > 允许插入的一端称为队尾 ()

> > 允许删除的一端称为对头 (shift)

> > ![](./demo/数据结构/queue.png)

</textarea>