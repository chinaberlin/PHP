<textarea kp-markdown>
# mysqli介绍
> mysqli驱动的大致都跟mysql驱动一样
> 一个是面向对象的，一个是面向过程的
> php6中将移除面向过程的mysql

# 什么是预处理?
> 可以把预处理语句看作您想要运行的 SQL 的一种编译过的模板，它可以使用变量参数进行定制。
> > 预处理语句可以带来两大好处：

> > 1. 查询只需解析（或准备）一次，但是可以用相同或不同的参数执行多次。当查询准备好后，数据库将分析、编译和优化执行该查询的计划。对于复杂的查询，这个过程要花比较长的时间，如果您需要以不同参数多次重复相同的查询，那么该过程将大大降低应用程序的速度。通过使用预处理语句，可以避免重复分析/ 编译/优化周期。简言之，预处理语句使用更少的资源，因而运行得更快。

> > 2. 提供给预处理语句的参数不需要用引号括起来，驱动程序会处理这些。如果应用程序独占地使用预处理语句，那么可以确保没有 SQL 入侵发生。（然而，如果您仍然将查询的其他部分建立在不受信任的输入之上，那么就仍然存在风险）。

# 什么是事物处理?
> 通俗的讲，就是把多件事情当做一件事情来处理。它是一个操作序列，这些操作要么都执行（成功），要么都不执行（都失败），它是一个不可分割的工作单位。

# 事物处理的ACID属性
> 原子性：要么全都执行，要么全都不执行。由于事务保证的原子性，你不需要亲自编写代码来处理诸如一些已更新完成，其他却失败了的状况。

> > 比如：从第一个课程的名单里移除此学生成功，但是添加他到第二个课程的名单时失败，那么事务就会中止，并且此学生最终不会被从第一个课程中的名单移除。

> 一致性：一致性意味着事务结束后系统的数据依然保证一致。在事务开始之前，数据保持有效的状态，事务结束后也如此。

> > 比如：把学生从第一个课程移除失败，但是添加到第二个课程成功，那么这个学生将被同时登记在两个课程上。这是不合法的情形，数据库的数据将不能保持一致

> 隔离性：多个用户可能同时对同一个数据库进行操作。隔离性保证了在事务完成之前，该事务外部不能看到事务里的数据的改变。也不能访问一些中间状态，因为假如事务终止的话，这些状态将永远不会发生。

> > 比如：你做一个查询来获取所有课程的学生名单，与此同时，一个事务正在运行，把一个学生从一个课程转移到另外一个，那么两个课程的名单上都不会出现这个学生。隔离性保证了事务外无法看到事务内的任何中间状态或结果。

> 持久性：持久性意味着即便是系统当机也能保证一致性的状态。如果一个数据库系统当机，它必须保证已完成的事务确实已经写入数据库。

# MYSQL中的事物处理
> 通过InnoDB类型,MYSQL事务系统能够完全满足事务安全的ACID测试

> MYISAM类型,不运行事务.因此,这种系统中的事务只能通过直接的表锁定实现

> `ALTER TABLE 表名 ENGINE = INNODB;`

# MYSQL的事物语法
> START TRANSACTION或BEGIN:开始一项新的事务

> COMMIT:提交当前事务，是变更成为永久变更

> ROLLBACK:回滚当前事务，取消其变更

> SET AUTOCOMMIT:禁用或启用默认的autocommit模式，用于当前连接。

# mysqli的事物
> mysqli提供了autocommit，rollback，commit方法

# 什么是SQLite?
> SQLite，是一款轻型的数据库，是遵守ACID的关联式数据库管理系统

> 它的设计目标是嵌入式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如 Tcl、C#、PHP、Java等，还有ODBC接口，同样比起Mysql、PostgreSQL这两款开源世界著名的数据库管理系统来讲，它的处理速度比他们都快。

# SQLite数据库管理

> 因为SQLite是嵌入式的，所以他的数据库文件可以放在任何地方 通过使用[sqlitestudio](http://sqlitestudio.one.pl/)软件，进行可视化管理

# SQLite和SQLite3
> SQLite类似于mysql驱动，SQLite3 类似于mysqli驱动，用法类似于mysqli

# 什么是PDO?
> POD扩展在PHP5中加入，PHP6中将默认识用PDO连接数据库，所有非PDO扩展将会在PHP6被从扩展中移除。该扩展提供PHP内置类 PDO来对数据库进行访问，不同数据库使用相同的方法名，解决数据库连接不统一的问题。

# PDO目标
> 提供一种轻型、清晰、方便的 API

> 统一各种不同 RDBMS 库的共有特性，但不排除更高级的特性。

> 通过 PHP 脚本提供可选的较大程度的抽象/兼容性。

# PDO特点

> 性能。PDO 从一开始就吸取了现有数据库扩展成功和失败的经验教训。因为 PDO 的代码是全新的，所以我们有机会重新开始设计性能，以利用 PHP 5 的最新特性。

> 能力。PDO 旨在将常见的数据库功能作为基础提供，同时提供对于 RDBMS 独特功能的方便访问。

> 简单。PDO 旨在使您能够轻松使用数据库。API 不会强行介入您的代码，同时会清楚地表明每个函数调用的过程。

> 运行时可扩展。PDO 扩展是模块化的，使您能够在运行时为您的数据库后端加载驱动程序，而不必重新编译或重新安装整个 PHP 程序。例如，PDO_OCI 扩展会替代 PDO 扩展实现 Oracle 数据库 API。还有一些用于 MySQL、PostgreSQL、ODBC 和 Firebird 的驱动程序，更多的驱动程序尚在开发。

# 安装PDO
> 修改你的php.ini配置文件,使它支持pdo,并开启对应的数据库扩展

> extension=php_pdo.dll

</textarea>