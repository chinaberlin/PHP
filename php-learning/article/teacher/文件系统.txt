<textarea kp-markdown>

# 目录操作
> basename()
> <p>返回路径中的文件名部分</p>
> dirname()
> <p>获取路径目录</p>
> pathinfo()
> <p>返回关于路径的所有信息</p>
> realPath()
> <p>解析所有路径的绝对路径</p>
> opendir()
> <p>打开目录句柄</p>
> readdir()
> <p>从目录句柄中读取条目</p>
> closedir()
> <p>关闭目录句柄</p>
> rewinddir()
> <p>倒回目录句柄</p>
> chdir()
> <p>改变目录</p>
> getcwd()
> <p>取得当前工作目录</p>
> rmdir()
> <p>删除文件夹，不能删除有内容的文件夹</p>

# 文件和磁盘大小
> filesize()
> <p>确定文件的大小</p>
> disk\_free\_space()
> <p>目录所在磁盘分区的可用空间</p>
> disk\_total\_space()
> <p>计算磁盘的总容量</p>

# 复制和移动文件
> copy()
> <p>复制文件</p>
> rename()
> <p>重命名一个文件或目录</p>

# 确定访问和修改时间
> fileatime()
> <p>文件的最后访问时间</p>
> filectime()
> <p>文件的最后改变时间</p>
> filemtime()
> <p>文件最后修改时间</p>
> stat()
> <p>给出文件的信息</p>
> touch()
> <p>设定文件的访问和修改时间</p>

# 打开、关闭、删除文件
> <p>在处理文件内容之前，通常需要创建所谓的句柄，同样结束该资源时，应当销毁该句柄</p>
> fopen()
> <p>打开文件</p>
> fclose()
> <p>销毁打开的句柄资源</p>
> unlink()
> <p>删除一个文件</p>

# fopen() 模式
> R	    只读。文件指针置于文件开头

> r+	读写。文件指针置于文件开头

> W	    只写。在写入前，删除文件内容，文件不存在，则尝试创建

> w+	读写。在读取或写入前，删除文件内容，文件不存在，则尝试创建

> A	    只写。文件指针置于文件末尾，如果文件不存在，则尝试创建，称为追加模式

> a+	读写。文件指针置于文件末尾。如果文件不存在，则尝试创建，称为追加到文件

> x	    创建并打开只写的文件，如果文件存在，fopen()会失败，并生成一个错误

> x+	创建并已读写方式打开文件，如果文件存在，fopen()会失败，并生成一个错误

# 读取文件
> file() <p>能够将文件读取到数组中，各元素由换行符分割。</p>
> file\_get\_content() <p>将文件中的内容读到字符串中</p>
> fgetcsv() <p>将csv文件读入数组</p>
> fgets() <p>从文件指针中读取一行。 </p>
> fgetss() <p>将从输入中清除所有的HTML和PHP标签</p>
> fgetc() <p><p>以一次读取一个字符的方式读取文件</p>
> fread() <p>忽略换行符，当碰到EOF或者读取到length个字符时，读取停止</p>
> readfile() <p>读取整个文件</p>

# 读取整个文件并解析
> 识别换行符 换行符通过字符序列\n(window上\r\n),表示文件中一行的末尾

> 识别文件末尾字符 程序需要一种标准的方式来识别何时达到文件的末尾，这种标准通常称为EOF字符,函数feof() 来确认是否达到资源末尾。

# 读取csv文件
> csv 全称 逗号分隔值文件格式

> 一般导出数据库或者excel都可以选择csv文件格式,csv对于数据都有相应符号进行分割

> csv文件有字符分界符，字符环绕符，

# 将字符串写入文件
> fwrite();
> <p>写入文件</p>
> file\_put\_contents();
> <p>将一个字符串写入文件</p>

# 移动文件指针
> fseek()

# 文件锁
> flock ()

> 当你在读写一个文件时，必要的给当前文件一个锁，防止其他用户也在同时读取或修改文件

</textarea>