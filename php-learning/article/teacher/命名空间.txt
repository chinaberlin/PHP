<textarea kp-markdown>

# 什么是命名空间
> 从广义上来说，命名空间是一种封装事物的方法。在很多地方都可以见到这种抽象概念。

> 例如，在操作系统中目录用来将相关文件分组，对于目录中的文件来说，它就扮演了命名空间的角色。

> 文件 only.txt 可以同时在目录/home/default 和 /home/other 中存在，但在同一个目录中不能存在两个 only.txt 文件。

> 另外，在目录 /home/greg 外访问 only.txt 文件时，我们必须将目录名以及目录分隔符放在文件名之前得到 /home/default/only.txt。这个原理应用到程序设计领域就是命名空间的概念。

# php中命名空间
> 在PHP中，命名空间用来解决两类问题：

> 1. 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突
> 2. 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。

# 定义命名空间
> 任意合法的PHP代码都可以包含在命名空间中，但只有三种类型的代码受命名空间的影响，它们是：类，函数和常量。

> 命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。

> [demo001](./demo/命名空间/001.php)

# 使用命名空间

> 非限定名称或不包含前缀的类名称test()

> 限定名称,或包含前缀的名称MyProject\Demo\Last\test()

> 完全限定名称，或包含了全局前缀操作符的名称 \MyProject\Demo\Last\test();

> [demo002](./demo/命名空间/002.php)

# 定义子命名空间

> 与目录和文件的关系很象，PHP命名空间也允许指定层次化的命名空间的名称。因此，命名空间的名字可以使用分层次的方式定义

> [demo003](./demo/命名空间/003.php)

# 同一文件定义多个命名空间
> 在实际的编程实践中，非常不提倡在同一个文件中定义多个命名空间。这种方式的主要用于将多个 PHP 脚本合并在同一个文件中。

> 将全局的非命名空间中的代码与命名空间中的代码组合在一起，只能使用大括号形式的语法。全局代码必须用一个不带名称的 namespace 语句加上大括号括起来

> [demo004](./demo/命名空间/004.php)

# \_\_NAMESPACE\_\_

> 常量 \_\_NAMESPACE\_\_ 的值是包含当前命名空间名称的字符串。

> [demo005](./demo/命名空间/005.php)

# 别名/导入

> PHP 命名空间支持 为类名称使用别名，或为命名空间名称使用别名。

> [demo006](./demo/命名空间/006.php)

# 全局空间

> 如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间，与 PHP 引入命名空间概念前一样。

> 在名称前加上前缀 \ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此

> [demo007](./demo/命名空间/007.php)

# 后备全局函数/常量

> 在一个命名空间中，当 PHP 遇到一个非限定的类、函数或常量名称时，它使用不同的优先策略来解析该名称。

> 类名称总是解析到当前命名空间中的名称。因此在访问系统内部或不包含在命名空间中的类名称时，必须使用完全限定名称。

> 对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。

> [demo008](./demo/命名空间/008.php)
</textarea>